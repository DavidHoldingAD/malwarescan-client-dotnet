using System;
using System.IO;
using System.Linq.Expressions;
using System.Net;
using System.Net.Http;
using System.Threading.Tasks;
using FluentAssertions;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;

namespace MalwareScan.Client.UnitTests
{
	[TestClass]
	public class MalwareScanEvaluationServiceV1_0Tests : EvaluationServiceTestsBase
	{
		const string DefaultUrl = "http://127.0.0.1/";

		[TestMethod]
		public void SubmitAsync_Throws_ArgumentNullException_Given_NullFiles()
		{
			#region Arrange

			var evaluationService = new MalwareScanEvaluationServiceV1_0(DefaultUrl);

			FileParameter[] files = null;

			#endregion

			#region Act

			Func<Task> action = async () => await evaluationService.SubmitAsync(files);

			#endregion

			#region Assert

			action.Should().ThrowExactly<ArgumentNullException>("the array of files should not be null")
				.Which.ParamName.Should().Be("files", "because the array of files is null");

			#endregion
		}

		[TestMethod]
		public void SubmitAsync_Throws_ArgumentException_Given_NoFiles()
		{
			#region Arrange

			var evaluationService = new MalwareScanEvaluationServiceV1_0(DefaultUrl);

			var files = new FileParameter[] { };

			#endregion

			#region Act

			Func<Task> action = async () => await evaluationService.SubmitAsync(files);

			#endregion

			#region Assert

			action.Should().ThrowExactly<ArgumentException>("the array of files should not be empty")
				.Which.ParamName.Should().Be("files", "because the array of files is empty");

			#endregion
		}

		[TestMethod]
		public void SubmitAsync_Throws_ArgumentException_Given_MultipleFiles()
		{
			#region Arrange

			var evaluationService = new MalwareScanEvaluationServiceV1_0(DefaultUrl);

			var files = new FileParameter[2];

			#endregion

			#region Act

			Func<Task> action = async () => await evaluationService.SubmitAsync(files);

			#endregion

			#region Assert

			action.Should().ThrowExactly<NotSupportedException>("the array of files cannot contain more than one item");

			#endregion
		}

		[TestMethod]
		public void SubmitAsync_Throws_FileNotFoundException_Given_NotExistingFile()
		{
			#region Arrange

			var mockRepo = new MockRepository(MockBehavior.Strict);

			Expression<Func<HttpRequestMessage, bool>> requestMessageExpression
				= x => x.Method.Method == "POST" && x.RequestUri.AbsolutePath == $"{DefaultUrl}eval";

			string id = Guid.NewGuid().ToString();

			var responseObj = new
			{
				id = id,
			};

			HttpResponseMessage responseMessage = CreateHttpResposeMessage(HttpStatusCode.Created, "application/json", responseObj);

			HttpMessageHandler handler = CreateHttpMessageHandler(mockRepo, requestMessageExpression, responseMessage);

			var httpClient = new HttpClient(handler);

			var evaluationService = new MalwareScanEvaluationServiceV1_0(DefaultUrl, httpClient);

			FileParameter[] files = new[]
			{
				new FileParameter
				{
					FileName = Guid.NewGuid().ToString(),
				},
			};

			#endregion

			#region Act

			Func<Task<string>> act = async () => await evaluationService.SubmitAsync(files);

			#endregion

			#region Assert

			act.Should().ThrowExactly<FileNotFoundException>("the file does not exist");

			#endregion
		}
	}
}
