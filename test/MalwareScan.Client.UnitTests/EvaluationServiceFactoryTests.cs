using System;
using System.Net.Http;
using System.Security.Cryptography.X509Certificates;
using FluentAssertions;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace MalwareScan.Client.UnitTests
{
	[TestClass]
	public class EvaluationServiceFactoryTests
	{
		private const string ServiceUrl = "http://127.0.0.1/";

		[TestMethod]
		public void CreateHttpClient_Returns_HttpClient_Given_NoArguments()
		{
			#region Arrange

			//

			#endregion

			#region Act

			HttpClient httpClient = EvaluationServiceFactory.CreateHttpClient();

			#endregion

			#region Assert

			httpClient.Should().NotBeNull("HTTP client should not be null");

			#endregion
		}

		[TestMethod]
		[DataRow(@"TestFiles\\Clyde Theskoon.pfx", "123123")]
		[DeploymentItem(@"TestFiles\\", @"TestFiles\\")]
		public void CreateHttpClient_Returns_HttpClient_Given_ClientCertificate(string clientCertificateFileName, string clientCertificatePassword)
		{
			#region Arrange

			var clientCertificate = new X509Certificate2(clientCertificateFileName, clientCertificatePassword);

			#endregion

			#region Act

			HttpClient httpClient = EvaluationServiceFactory.CreateHttpClient(clientCertificate: clientCertificate);

			#endregion

			#region Assert

			httpClient.Should().NotBeNull("HTTP client should not be null");

			#endregion
		}

		[TestMethod]
		public void CreateHttpClient_Returns_HttpClient_Given_UserName()
		{
			#region Arrange

			string userName = Guid.NewGuid().ToString();

			#endregion

			#region Act

			HttpClient httpClient = EvaluationServiceFactory.CreateHttpClient(userName: userName);

			#endregion

			#region Assert

			httpClient.Should().NotBeNull("HTTP client should not be null");

			#endregion
		}

		[TestMethod]
		public void CreateHttpClient_Returns_HttpClient_Given_UserName_And_Password()
		{
			#region Arrange

			string userName = Guid.NewGuid().ToString();
			string password = Guid.NewGuid().ToString();

			#endregion

			#region Act

			HttpClient httpClient = EvaluationServiceFactory.CreateHttpClient(userName: userName, password: password);

			#endregion

			#region Assert

			httpClient.Should().NotBeNull("HTTP client should not be null");

			#endregion
		}

		[TestMethod]
		public void CreateEvaluationService_Throws_ArgumentNullException_Given_NullUrl()
		{
			#region Arrange

			//

			#endregion

			#region Act

			Action act = () => EvaluationServiceFactory.CreateEvaluationService(null);

			#endregion

			#region Assert

			act.Should().ThrowExactly<ArgumentNullException>("a non-null value is required for the evaluation service URL");

			#endregion
		}

		[TestMethod]
		public void CreateEvaluationService_Returns_EvaluationService_Given_Url()
		{
			#region Arrange

			//

			#endregion

			#region Act

			IEvaluationService evaluationService = EvaluationServiceFactory.CreateEvaluationService(ServiceUrl);

			#endregion

			#region Assert

			evaluationService.Should().NotBeNull("evaluation service should not be null");

			#endregion
		}
	}
}
