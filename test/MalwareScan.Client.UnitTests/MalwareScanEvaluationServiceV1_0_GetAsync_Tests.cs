using System;
using System.IO;
using System.Net;
using System.Net.Http;
using System.Threading.Tasks;
using FluentAssertions;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;

namespace MalwareScan.Client.UnitTests
{
	[TestClass]
	public class MalwareScanEvaluationServiceV1_0_GetAsync_Tests : EvaluationServiceTestsBase
	{
		[TestMethod]
		public void GetAsync_Throws_ArgumentNullException_Given_NullId()
		{
			#region Arrange

			var evaluationService = new MalwareScanEvaluationServiceV1_0(ServiceUrl);

			string id = null;

			#endregion

			#region Act

			Func<Task> action = async () => await evaluationService.GetAsync(id);

			#endregion

			#region Assert

			action.Should().ThrowExactly<ArgumentNullException>("the id should not be null")
				.Which.ParamName.Should().Be("id", "because the id is null");

			#endregion
		}

		[TestMethod]
		public void GetAsync_Throws_DummyException_Given_DummyException_In_HttpClient()
		{
			#region Arrange

			string id = Guid.NewGuid().ToString();

			var mockRepo = new MockRepository(MockBehavior.Strict);

			HttpMessageHandler handler = CreateHttpMessageHandler(mockRepo,
				x => x.Method.Method == "GET" && x.RequestUri.ToString() == $"{ServiceUrl}eval/{id}",
				new DummyException("Unhandled exception during a mocked HTTP call."));

			var httpClient = new HttpClient(handler);

			var evaluationService = new MalwareScanEvaluationServiceV1_0(ServiceUrl, httpClient);

			#endregion

			#region Act

			Func<Task<Evaluation>> action = async () => await evaluationService.GetAsync(id);

			#endregion

			#region Assert

			action.Should().ThrowExactly<DummyException>("the HTTP client throws a dummy exception");

			#endregion
		}

		[TestMethod]
		public void GetAsync_Throws_EvaluationNotFoundException_Given_NotFound()
		{
			#region Arrange

			string id = Guid.NewGuid().ToString();

			var mockRepo = new MockRepository(MockBehavior.Strict);

			HttpMessageHandler handler = CreateHttpMessageHandler(mockRepo,
				x => x.Method.Method == "GET" && x.RequestUri.ToString() == $"{ServiceUrl}eval/{id}",
				HttpStatusCode.NotFound);

			var httpClient = new HttpClient(handler);

			var evaluationService = new MalwareScanEvaluationServiceV1_0(ServiceUrl, httpClient);

			#endregion

			#region Act

			Func<Task<Evaluation>> action = async () => await evaluationService.GetAsync(id);

			#endregion

			#region Assert

			action.Should().ThrowExactly<EvaluationNotFoundException>("the HTTP client returns 404 Not Found");

			#endregion
		}

		[TestMethod]
		public void GetAsync_Throws_AuthenticationException_Given_Unauthorized()
		{
			#region Arrange

			string id = Guid.NewGuid().ToString();

			var mockRepo = new MockRepository(MockBehavior.Strict);

			HttpMessageHandler handler = CreateHttpMessageHandler(mockRepo,
				x => x.Method.Method == "GET" && x.RequestUri.ToString() == $"{ServiceUrl}eval/{id}",
				HttpStatusCode.Unauthorized);

			var httpClient = new HttpClient(handler);

			var evaluationService = new MalwareScanEvaluationServiceV1_0(ServiceUrl, httpClient);

			#endregion

			#region Act

			Func<Task<Evaluation>> action = async () => await evaluationService.GetAsync(id);

			#endregion

			#region Assert

			action.Should().ThrowExactly<AuthenticationException>("the HTTP client returns 401 Unauthorized");

			#endregion
		}

		[TestMethod]
		public void GetAsync_Throws_AuthorizationException_Given_Forbidden()
		{
			#region Arrange

			string id = Guid.NewGuid().ToString();

			var mockRepo = new MockRepository(MockBehavior.Strict);

			HttpMessageHandler handler = CreateHttpMessageHandler(mockRepo,
				x => x.Method.Method == "GET" && x.RequestUri.ToString() == $"{ServiceUrl}eval/{id}",
				HttpStatusCode.Forbidden);

			var httpClient = new HttpClient(handler);

			var evaluationService = new MalwareScanEvaluationServiceV1_0(ServiceUrl, httpClient);

			#endregion

			#region Act

			Func<Task<Evaluation>> action = async () => await evaluationService.GetAsync(id);

			#endregion

			#region Assert

			action.Should().ThrowExactly<AuthorizationException>("the HTTP client returns 403 Forbidden");

			#endregion
		}

		[TestMethod]
		public void GetAsync_Throws_EvaluationServiceException_Given_InternalServerError()
		{
			#region Arrange

			string id = Guid.NewGuid().ToString();

			var mockRepo = new MockRepository(MockBehavior.Strict);

			HttpMessageHandler handler = CreateHttpMessageHandler(mockRepo,
				x => x.Method.Method == "GET" && x.RequestUri.ToString() == $"{ServiceUrl}eval/{id}",
				HttpStatusCode.InternalServerError);

			var httpClient = new HttpClient(handler);

			var evaluationService = new MalwareScanEvaluationServiceV1_0(ServiceUrl, httpClient);

			#endregion

			#region Act

			Func<Task<Evaluation>> action = async () => await evaluationService.GetAsync(id);

			#endregion

			#region Assert

			action.Should().ThrowExactly<EvaluationServiceException>("the HTTP client returns 500 Internal Server Error");

			#endregion
		}

		[TestMethod]
		public void GetAsync_Throws_EvaluationServiceException_Given_UnexpectedResponse()
		{
			#region Arrange

			string id = Guid.NewGuid().ToString();

			var mockRepo = new MockRepository(MockBehavior.Strict);

			HttpMessageHandler handler = CreateHttpMessageHandler(mockRepo,
				x => x.Method.Method == "GET" && x.RequestUri.ToString() == $"{ServiceUrl}eval/{id}",
				0);

			var httpClient = new HttpClient(handler);

			var evaluationService = new MalwareScanEvaluationServiceV1_0(ServiceUrl, httpClient);

			#endregion

			#region Act

			Func<Task<Evaluation>> action = async () => await evaluationService.GetAsync(id);

			#endregion

			#region Assert

			action.Should().ThrowExactly<EvaluationServiceException>("the HTTP client returns unexpected status code");

			#endregion
		}

		// TODO: test with files and different statuses
		[TestMethod]
		[DataRow("{2DE90573-5D3C-4F0D-92B4-8832AF64BA72}", null, false, null)]
		[DataRow("{2DE90573-5D3C-4F0D-92B4-8832AF64BA72}", null, false, false)]
		[DataRow("{2DE90573-5D3C-4F0D-92B4-8832AF64BA72}", null, false, true)]
		[DataRow("{2DE90573-5D3C-4F0D-92B4-8832AF64BA72}", null, true, null)]
		[DataRow("{2DE90573-5D3C-4F0D-92B4-8832AF64BA72}", null, true, false)]
		[DataRow("{2DE90573-5D3C-4F0D-92B4-8832AF64BA72}", null, true, true)]
		[DataRow("{2DE90573-5D3C-4F0D-92B4-8832AF64BA72}", "{6E8C6FEF-10DD-48A3-98CD-6A47C7FE87BA}", false, null)]
		[DataRow("{2DE90573-5D3C-4F0D-92B4-8832AF64BA72}", "{6E8C6FEF-10DD-48A3-98CD-6A47C7FE87BA}", false, false)]
		[DataRow("{2DE90573-5D3C-4F0D-92B4-8832AF64BA72}", "{6E8C6FEF-10DD-48A3-98CD-6A47C7FE87BA}", false, true)]
		[DataRow("{2DE90573-5D3C-4F0D-92B4-8832AF64BA72}", "{6E8C6FEF-10DD-48A3-98CD-6A47C7FE87BA}", true, null)]
		[DataRow("{2DE90573-5D3C-4F0D-92B4-8832AF64BA72}", "{6E8C6FEF-10DD-48A3-98CD-6A47C7FE87BA}", true, false)]
		[DataRow("{2DE90573-5D3C-4F0D-92B4-8832AF64BA72}", "{6E8C6FEF-10DD-48A3-98CD-6A47C7FE87BA}", true, true)]
		public async Task GetAsync_Returns_Evaluation(string id, string correlationId, bool includeElapsedTime, bool? isMalicious)
		{
			#region Arrange

			var date = new DateTime(DateTime.Now.Year, 1, 1);
			DateTime statusDate = DateTime.Now;
			TimeSpan? elapsedTime = includeElapsedTime
				? statusDate - date
				: (TimeSpan?)null;

			var mockRepo = new MockRepository(MockBehavior.Strict);

			HttpResponseMessage responseMessage = CreateHttpResponseMessage(id,
				correlationId,
				date,
				statusDate,
				elapsedTime,
				isMalicious);

			HttpMessageHandler handler = CreateHttpMessageHandler(mockRepo,
				x => x.Method.Method == "GET" && x.RequestUri.ToString() == $"{ServiceUrl}eval/{id}",
				responseMessage);

			var httpClient = new HttpClient(handler);

			var evaluationService = new MalwareScanEvaluationServiceV1_0(ServiceUrl, httpClient);

			#endregion

			#region Act

			Evaluation result = await evaluationService.GetAsync(id);

			#endregion

			#region Assert

			result.Should().NotBeNull("the evaluation should not be null");

			result.Id.Should().BeEquivalentTo(id, "the ID match the requested one");

			result.CorrelationId.Should().BeEquivalentTo(correlationId, "the correlation ID match the expected one");

			result.Date.Should().Be(date, "the date should match the expected one");

			result.ElapsedTime.Should().Be(elapsedTime, "the elapsed time match the expected one");

			// TODO: assert status

			result.StatusDate.Should().Be(statusDate, "the status date should match the expected one");

			result.IsMalicious.Should().Be(isMalicious, "the malicious flag should match the expected one");

			#endregion
		}

		private static HttpResponseMessage CreateHttpResponseMessage(string id,
			string correlationId,
			DateTime date,
			DateTime statusDate,
			TimeSpan? elapsedTime,
			bool? isMalicious)
		{
			var result = new MalwareScanApiV1_0.Evaluation
			{
				Id = id,
				CorrelationID = correlationId,
				Date = date,
				ElapsedTime = elapsedTime,
				// TODO: set as argument
				Status = MalwareScanApiV1_0.EvaluationStatus.Complete,
				StatusDate = statusDate,
				Malicious = isMalicious,
			};

			return CreateHttpResponseMessage(HttpStatusCode.OK, result);
		}
	}
}
