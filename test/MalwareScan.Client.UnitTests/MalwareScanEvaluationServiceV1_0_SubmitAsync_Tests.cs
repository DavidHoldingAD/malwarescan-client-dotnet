using System;
using System.IO;
using System.Net;
using System.Net.Http;
using System.Threading.Tasks;
using FluentAssertions;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;

namespace MalwareScan.Client.UnitTests
{
	[TestClass]
	public class MalwareScanEvaluationServiceV1_0_SubmitAsync_Tests : EvaluationServiceTestsBase
	{
		[TestMethod]
		public void SubmitAsync_Throws_ArgumentNullException_Given_NullFiles()
		{
			#region Arrange

			var evaluationService = new MalwareScanEvaluationServiceV1_0(ServiceUrl);

			FileParameter[] files = null;

			#endregion

			#region Act

			Func<Task> action = async () => await evaluationService.SubmitAsync(files);

			#endregion

			#region Assert

			action.Should().ThrowExactly<ArgumentNullException>("the array of files should not be null")
				.Which.ParamName.Should().Be("files", "because the array of files is null");

			#endregion
		}

		[TestMethod]
		public void SubmitAsync_Throws_ArgumentException_Given_NoFiles()
		{
			#region Arrange

			var evaluationService = new MalwareScanEvaluationServiceV1_0(ServiceUrl);

			var files = new FileParameter[] { };

			#endregion

			#region Act

			Func<Task> action = async () => await evaluationService.SubmitAsync(files);

			#endregion

			#region Assert

			action.Should().ThrowExactly<ArgumentException>("the array of files should not be empty")
				.Which.ParamName.Should().Be("files", "because the array of files is empty");

			#endregion
		}

		[TestMethod]
		public void SubmitAsync_Throws_ArgumentException_Given_MultipleFiles()
		{
			#region Arrange

			var evaluationService = new MalwareScanEvaluationServiceV1_0(ServiceUrl);

			var files = new FileParameter[2];

			#endregion

			#region Act

			Func<Task> action = async () => await evaluationService.SubmitAsync(files);

			#endregion

			#region Assert

			action.Should().ThrowExactly<NotSupportedException>("the array of files cannot contain more than one item");

			#endregion
		}

		[TestMethod]
		public void SubmitAsync_Throws_FileNotFoundException_Given_NotExistingFile()
		{
			#region Arrange

			var evaluationService = new MalwareScanEvaluationServiceV1_0(ServiceUrl);

			FileParameter[] files = new[]
			{
				new FileParameter
				{
					FileName = Guid.NewGuid().ToString(),
				},
			};

			#endregion

			#region Act

			Func<Task<string>> action = async () => await evaluationService.SubmitAsync(files);

			#endregion

			#region Assert

			action.Should().ThrowExactly<FileNotFoundException>("the file does not exist");

			#endregion
		}

		[TestMethod]
		public void SubmitAsync_Throws_FileNotFoundException_Given_NotExistingDirectory()
		{
			#region Arrange

			var evaluationService = new MalwareScanEvaluationServiceV1_0(ServiceUrl);

			FileParameter[] files = new[]
			{
				new FileParameter
				{
					FileName = Guid.NewGuid().ToString(),
				},
			};

			#endregion

			#region Act

			Func<Task<string>> action = async () => await evaluationService.SubmitAsync(files);

			#endregion

			#region Assert

			action.Should().ThrowExactly<FileNotFoundException>("the file directory does not exist");

			#endregion
		}

		[TestMethod]
		[DataRow(@"TestFiles\\safe.txt")]
		[DataRow(@"TestFiles\\safe.pdf")]
		[DeploymentItem(@"TestFiles\\", @"TestFiles\\")]
		public void SubmitAsync_Throws_DummyException_Given_DummyException_In_HttpClient(string fileName)
		{
			#region Arrange

			var mockRepo = new MockRepository(MockBehavior.Strict);

			HttpMessageHandler handler = CreateHttpMessageHandler(mockRepo,
				x => x.Method.Method == "POST" && x.RequestUri.ToString() == $"{ServiceUrl}eval",
				new DummyException("Unhandled exception during a mocked HTTP call."));

			var httpClient = new HttpClient(handler);

			var evaluationService = new MalwareScanEvaluationServiceV1_0(ServiceUrl, httpClient);

			FileParameter[] files = new[]
			{
				new FileParameter
				{
					FileName = fileName,
				},
			};

			#endregion

			#region Act

			Func<Task<string>> action = async () => await evaluationService.SubmitAsync(files);

			#endregion

			#region Assert

			action.Should().ThrowExactly<DummyException>("the HTTP client throws a dummy exception");

			#endregion
		}

		[TestMethod]
		[DataRow(@"TestFiles\\safe.txt")]
		[DataRow(@"TestFiles\\safe.pdf")]
		[DeploymentItem(@"TestFiles\\", @"TestFiles\\")]
		public void SubmitAsync_Throws_DuplicateEvaluationFoundException_Given_Conflict(string fileName)
		{
			#region Arrange

			var mockRepo = new MockRepository(MockBehavior.Strict);

			HttpMessageHandler handler = CreateHttpMessageHandler(mockRepo,
				x => x.Method.Method == "POST" && x.RequestUri.ToString() == $"{ServiceUrl}eval",
				HttpStatusCode.Conflict);

			var httpClient = new HttpClient(handler);

			var evaluationService = new MalwareScanEvaluationServiceV1_0(ServiceUrl, httpClient);

			FileParameter[] files = new[]
			{
				new FileParameter
				{
					FileName = fileName,
				},
			};

			#endregion

			#region Act

			Func<Task<string>> action = async () => await evaluationService.SubmitAsync(files);

			#endregion

			#region Assert

			action.Should().ThrowExactly<DuplicateEvaluationFoundException>("the HTTP client returns 409 Conflict");

			#endregion
		}

		[TestMethod]
		[DataRow(@"TestFiles\\safe.txt")]
		[DataRow(@"TestFiles\\safe.pdf")]
		[DeploymentItem(@"TestFiles\\", @"TestFiles\\")]
		public void SubmitAsync_Throws_AuthenticationException_Given_Unauthorized(string fileName)
		{
			#region Arrange

			var mockRepo = new MockRepository(MockBehavior.Strict);

			HttpMessageHandler handler = CreateHttpMessageHandler(mockRepo,
				x => x.Method.Method == "POST" && x.RequestUri.ToString() == $"{ServiceUrl}eval",
				HttpStatusCode.Unauthorized);

			var httpClient = new HttpClient(handler);

			var evaluationService = new MalwareScanEvaluationServiceV1_0(ServiceUrl, httpClient);

			FileParameter[] files = new[]
			{
				new FileParameter
				{
					FileName = fileName,
				},
			};

			#endregion

			#region Act

			Func<Task<string>> action = async () => await evaluationService.SubmitAsync(files);

			#endregion

			#region Assert

			action.Should().ThrowExactly<AuthenticationException>("the HTTP client returns 401 Unauthorized");

			#endregion
		}

		[TestMethod]
		[DataRow(@"TestFiles\\safe.txt")]
		[DataRow(@"TestFiles\\safe.pdf")]
		[DeploymentItem(@"TestFiles\\", @"TestFiles\\")]
		public void SubmitAsync_Throws_AuthorizationException_Given_Forbidden(string fileName)
		{
			#region Arrange

			var mockRepo = new MockRepository(MockBehavior.Strict);

			HttpMessageHandler handler = CreateHttpMessageHandler(mockRepo,
				x => x.Method.Method == "POST" && x.RequestUri.ToString() == $"{ServiceUrl}eval",
				HttpStatusCode.Forbidden);

			var httpClient = new HttpClient(handler);

			var evaluationService = new MalwareScanEvaluationServiceV1_0(ServiceUrl, httpClient);

			FileParameter[] files = new[]
			{
				new FileParameter
				{
					FileName = fileName,
				},
			};

			#endregion

			#region Act

			Func<Task<string>> action = async () => await evaluationService.SubmitAsync(files);

			#endregion

			#region Assert

			action.Should().ThrowExactly<AuthorizationException>("the HTTP client returns 403 Forbidden");

			#endregion
		}

		[TestMethod]
		[DataRow(@"TestFiles\\safe.txt")]
		[DataRow(@"TestFiles\\safe.pdf")]
		[DeploymentItem(@"TestFiles\\", @"TestFiles\\")]
		public void SubmitAsync_Throws_EvaluationServiceException_Given_InternalServerError(string fileName)
		{
			#region Arrange

			var mockRepo = new MockRepository(MockBehavior.Strict);

			HttpMessageHandler handler = CreateHttpMessageHandler(mockRepo,
				x => x.Method.Method == "POST" && x.RequestUri.ToString() == $"{ServiceUrl}eval",
				HttpStatusCode.InternalServerError);

			var httpClient = new HttpClient(handler);

			var evaluationService = new MalwareScanEvaluationServiceV1_0(ServiceUrl, httpClient);

			FileParameter[] files = new[]
			{
				new FileParameter
				{
					FileName = fileName,
				},
			};

			#endregion

			#region Act

			Func<Task<string>> action = async () => await evaluationService.SubmitAsync(files);

			#endregion

			#region Assert

			action.Should().ThrowExactly<EvaluationServiceException>("the HTTP client returns 500 Internal Server Error");

			#endregion
		}

		[TestMethod]
		[DataRow(@"TestFiles\\safe.txt")]
		[DataRow(@"TestFiles\\safe.pdf")]
		[DeploymentItem(@"TestFiles\\", @"TestFiles\\")]
		public void SubmitAsync_Throws_EvaluationServiceException_Given_UnexpectedResponse(string fileName)
		{
			#region Arrange

			var mockRepo = new MockRepository(MockBehavior.Strict);

			HttpMessageHandler handler = CreateHttpMessageHandler(mockRepo,
				x => x.Method.Method == "POST" && x.RequestUri.ToString() == $"{ServiceUrl}eval",
				0);

			var httpClient = new HttpClient(handler);

			var evaluationService = new MalwareScanEvaluationServiceV1_0(ServiceUrl, httpClient);

			FileParameter[] files = new[]
			{
				new FileParameter
				{
					FileName = fileName,
				},
			};

			#endregion

			#region Act

			Func<Task<string>> action = async () => await evaluationService.SubmitAsync(files);

			#endregion

			#region Assert

			action.Should().ThrowExactly<EvaluationServiceException>("the HTTP client returns unexpected status code");

			#endregion
		}

		[TestMethod]
		[DataRow(@"TestFiles\\safe.txt")]
		[DataRow(@"TestFiles\\safe.pdf")]
		[DeploymentItem(@"TestFiles\\", @"TestFiles\\")]
		public async Task SubmitAsync_Returns_Id(string fileName)
		{
			#region Arrange

			string id = Guid.NewGuid().ToString();

			var mockRepo = new MockRepository(MockBehavior.Strict);

			HttpResponseMessage responseMessage = CreateHttpResponseMessage(id);

			HttpMessageHandler handler = CreateHttpMessageHandler(mockRepo,
				x => x.Method.Method == "POST" && x.RequestUri.ToString() == $"{ServiceUrl}eval",
				responseMessage);

			var httpClient = new HttpClient(handler);

			var evaluationService = new MalwareScanEvaluationServiceV1_0(ServiceUrl, httpClient);

			FileParameter[] files = new[]
			{
				new FileParameter
				{
					FileName = fileName,
				},
			};

			#endregion

			#region Act

			string result = await evaluationService.SubmitAsync(files);

			#endregion

			#region Assert

			result.Should().NotBeNull("the submission ID should not be null");

			result.Should().BeEquivalentTo(id, "the submission ID match the expected one");

			#endregion
		}

		private static HttpResponseMessage CreateHttpResponseMessage(string id)
		{
			return CreateHttpResponseMessage(HttpStatusCode.Created, id);
		}
	}
}
