using System;
using System.Linq.Expressions;
using System.Net;
using System.Net.Http;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Moq;
using Moq.Protected;
using Newtonsoft.Json;

namespace MalwareScan.Client.UnitTests
{
	public abstract class EvaluationServiceTestsBase
	{
		protected const string ServiceUrl = "http://127.0.0.1/";

		protected static HttpMessageHandler CreateHttpMessageHandler(
			MockRepository mockRepo,
			Expression<Func<HttpRequestMessage, bool>> requestMessageExpression,
			HttpStatusCode statusCode,
			object contentObj = null,
			string contentType = null)
		{
			if (mockRepo == null)
			{
				throw new ArgumentNullException(nameof(mockRepo));
			}

			if (requestMessageExpression == null)
			{
				throw new ArgumentNullException(nameof(requestMessageExpression));
			}

			HttpResponseMessage responseMessage = CreateHttpResponseMessage(statusCode, contentObj, contentType);

			return CreateHttpMessageHandler(mockRepo, requestMessageExpression, responseMessage);
		}

		protected static HttpMessageHandler CreateHttpMessageHandler(
			MockRepository mockRepo,
			Expression<Func<HttpRequestMessage, bool>> requestMessageExpression,
			HttpResponseMessage responseMessage)
		{
			if (mockRepo == null)
			{
				throw new ArgumentNullException(nameof(mockRepo));
			}

			if (requestMessageExpression == null)
			{
				throw new ArgumentNullException(nameof(requestMessageExpression));
			}

			if (responseMessage == null)
			{
				throw new ArgumentNullException(nameof(responseMessage));
			}

			Mock<HttpMessageHandler> handlerMock = mockRepo.Create<HttpMessageHandler>();

			handlerMock
				.Protected()
				// Setup the protected method to mock
				.Setup<Task<HttpResponseMessage>>(
					"SendAsync",
					ItExpr.Is(requestMessageExpression),
					ItExpr.IsAny<CancellationToken>()
				)
				// prepare the expected response of the mocked HTTP call
				.ReturnsAsync(responseMessage);

			return handlerMock.Object;
		}

		protected static HttpMessageHandler CreateHttpMessageHandler(
			MockRepository mockRepo,
			Expression<Func<HttpRequestMessage, bool>> requestMessageExpression,
			Exception exception)
		{
			if (mockRepo == null)
			{
				throw new ArgumentNullException(nameof(mockRepo));
			}

			if (requestMessageExpression == null)
			{
				throw new ArgumentNullException(nameof(requestMessageExpression));
			}

			if (exception == null)
			{
				throw new ArgumentNullException(nameof(exception));
			}

			Mock<HttpMessageHandler> handlerMock = mockRepo.Create<HttpMessageHandler>();

			handlerMock
				.Protected()
				// Setup the protected method to mock
				.Setup<Task<HttpResponseMessage>>(
					"SendAsync",
					ItExpr.Is(requestMessageExpression),
					ItExpr.IsAny<CancellationToken>()
				)
				// throws an exception during the mocked HTTP call
				.ThrowsAsync(exception);

			return handlerMock.Object;
		}

		protected static HttpResponseMessage CreateHttpResponseMessage(
			HttpStatusCode statusCode,
			object contentObj = null,
			string contentType = null)
		{
			var responseMessage = new HttpResponseMessage
			{
				StatusCode = statusCode,
			};

			string contentString;

			if (contentObj == null)
			{
				contentString = string.Empty;

			}
			else
			{
				contentString = JsonConvert.SerializeObject(contentObj);
			}

			if (contentType == null)
			{
				responseMessage.Content = new StringContent(contentString);
			}
			else
			{
				responseMessage.Content = new StringContent(contentString, Encoding.Default, contentType);
			}

			return responseMessage;
		}
	}
}
