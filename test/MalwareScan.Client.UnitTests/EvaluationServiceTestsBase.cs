using System;
using System.Linq.Expressions;
using System.Net;
using System.Net.Http;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Moq;
using Moq.Protected;
using Newtonsoft.Json;

namespace MalwareScan.Client.UnitTests
{
	public abstract class EvaluationServiceTestsBase
	{
		protected static HttpMessageHandler CreateHttpMessageHandler(
			MockRepository mockRepo,
			Expression<Func<HttpRequestMessage, bool>> requestMessageExpression,
			HttpResponseMessage responseMessage)
		{
			if (mockRepo == null)
			{
				throw new ArgumentNullException(nameof(mockRepo));
			}

			if (requestMessageExpression == null)
			{
				throw new ArgumentNullException(nameof(requestMessageExpression));
			}

			if (responseMessage == null)
			{
				throw new ArgumentNullException(nameof(responseMessage));
			}

			Mock<HttpMessageHandler> handlerMock = mockRepo.Create<HttpMessageHandler>();

			handlerMock
				.Protected()
				// Setup the protected method to mock
				.Setup<Task<HttpResponseMessage>>(
					"SendAsync",
					ItExpr.Is(requestMessageExpression),
					ItExpr.IsAny<CancellationToken>()
				)
				// prepare the expected response of the mocked HTTP call
				.ReturnsAsync(responseMessage);

			return handlerMock.Object;
		}

		protected static HttpResponseMessage CreateHttpResposeMessage(
			HttpStatusCode statusCode,
			string contentType = null,
			object contentObj = null)
		{
			var responseMessage = new HttpResponseMessage
			{
				StatusCode = statusCode,
			};

			if (contentObj != null)
			{
				string contentString = JsonConvert.SerializeObject(contentObj);

				if (contentType == null)
				{
					responseMessage.Content = new StringContent(contentString);
				}
				else
				{
					responseMessage.Content = new StringContent(contentString, Encoding.Default, contentType);
				}
			}

			return responseMessage;
		}
	}
}
