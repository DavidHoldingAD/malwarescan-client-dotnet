using System;
using System.Net;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using CLIENT_API = MalwareScan.Client.ApiV1_1;

namespace MalwareScan.Client
{
	/// <summary>
	/// Represents an evaluation service that provides access to MalwareScan API v1.1.
	/// </summary>
	public class MalwareScanEvaluationServiceV1_1 : IEvaluationService
	{
		private readonly CLIENT_API.ApiClient _client;
		private bool _isDisposed;

		/// <summary>
		/// Initializes a new instance of the <see cref="MalwareScanEvaluationServiceV1_1"/> class with a specified base URL and HTTP client.
		/// </summary>
		/// <param name="url">the base URL of the REST API</param>
		/// <param name="httpClient">the HTTP client instance</param>
		public MalwareScanEvaluationServiceV1_1(string url, HttpClient httpClient)
		{
			if (url == null)
			{
				throw new ArgumentNullException(nameof(url));
			}

			if (httpClient == null)
			{
				throw new ArgumentNullException(nameof(httpClient));
			}

			_client = new CLIENT_API.ApiClient(httpClient)
			{
				BaseUrl = url,
			};
		}

		/// <summary>
		/// Disposes unmanaged resources allocated by this <see cref="MalwareScanEvaluationServiceV1_1"/>.
		/// </summary>
		~MalwareScanEvaluationServiceV1_1()
		{
			// Do not change this code. Put cleanup code in Dispose(bool disposing) above.
			Dispose(false);
		}

		#region IEvaluationService Members

		/// <summary>
		/// Submits files for evaluation.
		/// </summary>
		/// <param name="files">the files to evaluate</param>
		/// <param name="correlationId">the correlation ID</param>
		/// <param name="cancellationToken">the cancellation token</param>
		/// <returns>the task returning the ID of the evaluation</returns>
		/// <exception cref="ArgumentNullException">a required argument is null</exception>
		/// <exception cref="ArgumentException">a required argument has an invalid value</exception>
		/// <exception cref="InvalidOperationException">the correlation ID already exists</exception>
		public Task<string> SubmitAsync(
			FileParameter[] files,
			string correlationId = null,
			CancellationToken cancellationToken = default)
		{
			if (files == null)
			{
				throw new ArgumentNullException(nameof(files));
			}

			if (files.Length <= 0)
			{
				throw new ArgumentException("No files for evaluation were specified.", nameof(files));
			}

			try
			{
				throw new NotImplementedException("Evaluation submission is not supported yet.");
			}
			catch (CLIENT_API.ApiClientException ex)
				when (ex.StatusCode == (int)HttpStatusCode.Conflict)
			{
				throw new DuplicateEvaluationFoundException($"An evaluation with the specified correlation ID `{correlationId}` already exists.", ex);
			}
			catch (CLIENT_API.ApiClientException ex)
				when (ex.StatusCode == (int)HttpStatusCode.Unauthorized)
			{
				throw new AuthenticationException($"The request could not be authenticated.", ex);
			}
			catch (CLIENT_API.ApiClientException ex)
				when (ex.StatusCode == (int)HttpStatusCode.Forbidden)
			{
				throw new AuthorizationException($"The requested operation could not be authorized.", ex);
			}
			catch (CLIENT_API.ApiClientException ex)
				when (ex.StatusCode == (int)HttpStatusCode.InternalServerError)
			{
				throw new EvaluationServiceException($"An internal server error has occurred.", ex);
			}
			catch (CLIENT_API.ApiClientException ex)
			{
				throw new EvaluationServiceException($"An unexpected result was received.", ex);
			}
		}

		/// <summary>
		/// Gets information about an evaluation.
		/// </summary>
		/// <param name="id">the ID of the evaluation</param>
		/// <param name="cancellationToken">the cancellation token</param>
		/// <returns>the information about an evaluation</returns>
		/// <exception cref="ArgumentNullException">a required argument is null</exception>
		/// <exception cref="EvaluationNotFoundException">an evaluation with the specified ID does not exist</exception>
		public async Task<Evaluation> GetAsync(
			string id,
			CancellationToken cancellationToken = default)
		{
			if (id == null)
			{
				throw new ArgumentNullException(nameof(id));
			}

			try
			{
				CLIENT_API.Evaluation serverEvaluation = await _client.GetAsync(id, cancellationToken);

				Evaluation evaluation = CLIENT_API.Conversion.ConvertEvaluation(serverEvaluation);

				return evaluation;
			}
			catch (CLIENT_API.ApiClientException ex)
				when (ex.StatusCode == (int)HttpStatusCode.NotFound)
			{
				throw new EvaluationNotFoundException($"An evaluation with the specified ID `{id}` was not found.", ex);
			}
			catch (CLIENT_API.ApiClientException ex)
				when (ex.StatusCode == (int)HttpStatusCode.Unauthorized)
			{
				throw new AuthenticationException($"The request could not be authenticated.", ex);
			}
			catch (CLIENT_API.ApiClientException ex)
				when (ex.StatusCode == (int)HttpStatusCode.Forbidden)
			{
				throw new AuthorizationException($"The requested operation could not be authorized.", ex);
			}
			catch (CLIENT_API.ApiClientException ex)
				when (ex.StatusCode == (int)HttpStatusCode.InternalServerError)
			{
				throw new EvaluationServiceException($"An internal server error has occurred.", ex);
			}
			catch (CLIENT_API.ApiClientException ex)
			{
				throw new EvaluationServiceException($"An unexpected result was received.", ex);
			}
		}

		/// <summary>
		/// Gets an evaluation file with a specified SHA-256 hash.
		/// </summary>
		/// <param name="hash">the SHA-256 hash of the file</param>
		/// <param name="cancellationToken">the cancellation token</param>
		/// <returns>the task returning the evaluation file</returns>
		/// <exception cref="ArgumentNullException">a required argument is null</exception>
		/// <exception cref="EvaluationFileNotFoundException">an evaluation file with the specified hash does not exist</exception>
		public async Task<EvaluationFile> GetFileBySha256(
			string hash,
			CancellationToken cancellationToken = default)
		{
			if (hash == null)
			{
				throw new ArgumentNullException(nameof(hash));
			}

			try
			{
				CLIENT_API.EvaluationFile serverEvaluationFile = await _client.FileBySha256Async(hash, cancellationToken);

				EvaluationFile evaluationFile = CLIENT_API.Conversion.ConvertEvaluationFile(serverEvaluationFile);

				return evaluationFile;
			}
			catch (CLIENT_API.ApiClientException ex)
				when (ex.StatusCode == (int)HttpStatusCode.NotFound)
			{
				throw new EvaluationFileNotFoundException($"An evaluation file with the specified SHA-256 hash `{hash}` was not found.", ex);
			}
			catch (CLIENT_API.ApiClientException ex)
				when (ex.StatusCode == (int)HttpStatusCode.Unauthorized)
			{
				throw new AuthenticationException($"The request could not be authenticated.", ex);
			}
			catch (CLIENT_API.ApiClientException ex)
				when (ex.StatusCode == (int)HttpStatusCode.Forbidden)
			{
				throw new AuthorizationException($"The requested operation could not be authorized.", ex);
			}
			catch (CLIENT_API.ApiClientException ex)
				when (ex.StatusCode == (int)HttpStatusCode.InternalServerError)
			{
				throw new EvaluationServiceException($"An internal server error has occurred.", ex);
			}
			catch (CLIENT_API.ApiClientException ex)
			{
				throw new EvaluationServiceException($"An unexpected result was received.", ex);
			}
		}

		#endregion

		#region IDisposable Members

		/// <summary>
		/// Disposes resources allocated by this <see cref="MalwareScanEvaluationServiceV1_1"/>.
		/// </summary>
		public void Dispose()
		{
			Dispose(true);

			GC.SuppressFinalize(this);
		}

		#endregion

		private void Dispose(bool disposing)
		{
			if (!_isDisposed)
			{
				if (disposing)
				{
					//
				}

				//

				_isDisposed = true;
			}
		}
	}
}
