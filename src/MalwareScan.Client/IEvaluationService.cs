using System;
using System.Threading;
using System.Threading.Tasks;

namespace MalwareScan.Client
{
	/// <summary>
	/// Represents a mechanism for interacting with an evaluation service.
	/// </summary>
	public interface IEvaluationService : IDisposable
	{
		/// <summary>
		/// Submits files for evaluation.
		/// </summary>
		/// <param name="files">the files to evaluate</param>
		/// <param name="correlationId">the correlation ID</param>
		/// <param name="cancellationToken">the cancellation token</param>
		/// <returns>the task returning the ID of the evaluation</returns>
		/// <exception cref="ArgumentNullException">a required argument is null</exception>
		/// <exception cref="ArgumentException">a required argument has an invalid value</exception>
		/// <exception cref="InvalidOperationException">the correlation ID already exists</exception>
		Task<string> SubmitAsync(FileParameter[] files, string correlationId = null, CancellationToken cancellationToken = default);

		/// <summary>
		/// Gets an evaluation with a specified ID.
		/// </summary>
		/// <param name="id">the ID of the evaluation</param>
		/// <param name="cancellationToken">the cancellation token</param>
		/// <returns>the task returning the evaluation</returns>
		/// <exception cref="ArgumentNullException">a required argument is null</exception>
		/// <exception cref="EvaluationNotFoundException">an evaluation with the specified ID does not exist</exception>
		Task<Evaluation> GetAsync(string id, CancellationToken cancellationToken = default);

		/// <summary>
		/// Gets an evaluation file with a specified SHA-256 hash.
		/// </summary>
		/// <param name="hash">the SHA-256 hash of the file</param>
		/// <param name="cancellationToken">the cancellation token</param>
		/// <returns>the task returning the evaluation file</returns>
		/// <exception cref="ArgumentNullException">a required argument is null</exception>
		/// <exception cref="EvaluationFileNotFoundException">an evaluation file with the specified hash does not exist</exception>
		Task<EvaluationFile> GetFileBySha256(string hash, CancellationToken cancellationToken = default);
	}
}
