using System;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Net.Security;
using System.Security.Authentication;
using System.Security.Cryptography.X509Certificates;
using System.Text;

namespace MalwareScan.Client
{
	/// <summary>
	/// Contains methods for creating <see cref="IEvaluationService"/> instances.
	/// </summary>
	public static class EvaluationServiceFactory
	{
		public static HttpClient CreateHttpClient(
			X509Certificate2 clientCertificate = null,
			string userName = null,
			string password = null,
			Func<HttpRequestMessage, X509Certificate2, X509Chain, SslPolicyErrors, bool> serverCertificateCustomValidationCallback = null)
		{
			#region Set up basic authentication, if specified

			AuthenticationHeaderValue authenticationHeader;

			if (userName == null)
			{
				authenticationHeader = null;
			}
			else
			{
				byte[] authenticationBytes = Encoding.ASCII.GetBytes($"{userName}:{password}");
				string authenticationBase64 = Convert.ToBase64String(authenticationBytes);
				authenticationHeader = new AuthenticationHeaderValue("Basic", authenticationBase64);
			}

			#endregion

			var httpClientHandler = new HttpClientHandler();

			if (clientCertificate != null)
			{
				httpClientHandler.ClientCertificates.Add(clientCertificate);
				httpClientHandler.ClientCertificateOptions = ClientCertificateOption.Manual;
				httpClientHandler.SslProtocols = SslProtocols.Tls12;
			}

			httpClientHandler.ServerCertificateCustomValidationCallback = serverCertificateCustomValidationCallback;

			var httpClient = new HttpClient(httpClientHandler, true);

			if (authenticationHeader != null)
			{
				httpClient.DefaultRequestHeaders.Authorization = authenticationHeader;
			}

			return httpClient;
		}

		public static IEvaluationService CreateEvaluationService(string url, HttpClient httpClient)
		{
			var evaluationService = new EvaluationService(url, httpClient);

			return evaluationService;
		}
	}
}
