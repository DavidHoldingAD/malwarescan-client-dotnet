# Docker image from Docker Hub as your build environment.
image: microsoft/dotnet:2.1.403-sdk

pipelines:
  default:
    - step:
        caches:
          - dotnetcore
        script:
          - export ARTIFACTS_PATH=./.artifacts
          - export CONFIGURATION=Debug
          # Install dependencies
          - apt-get update
          # Try to workaround the following error:
          # > Could not determine assembly version: System.TypeInitializationException: The type initializer for 'LibGit2Sharp.Core.NativeMethods' threw an exception.
          # > ---> System.DllNotFoundException: Unable to load shared library 'git2-15e1193' or one of its dependencies. In order to help diagnose loading problems, consider setting the LD_DEBUG environment variable:
          # > libgit2-15e1193: cannot open shared object file: No such file or directory [...]
          - apt-get install --yes --no-install-recommends libgit2-24
          - apt-get install --yes --no-install-recommends libgit2-glib
          - apt-get install --yes --no-install-recommends libcurl3-gnutls
          # Good practice, because Windows line endings are different from Unix/Linux ones
          - git config --global core.autocrlf true
          # Get .NET Core version
          - dotnet --version
          # Build MalwareScan.Client
          - >-
              dotnet publish ./src/MalwareScan.Client `
                --output "$ARTIFACTS_PATH/MalwareScan.Client/fdd" `
                --configuration "$CONFIGURATION"

          # Pack MalwareScan.Client
          - >-
              dotnet pack ./src/MalwareScan.Client `
                --output "$ARTIFACTS_PATH" `
                --configuration "$CONFIGURATION"

          # Build MalwareScan.ClientApp (framework-dependend deployment)
          - >-
              dotnet publish ./src/MalwareScan.ClientApp `
                --output "$ARTIFACTS_PATH/MalwareScan.ClientApp/fdd" `
                --configuration "$CONFIGURATION"

          # Build MalwareScan.ClientApp for win-x86
          - >-
              dotnet publish ./src/MalwareScan.ClientApp `
                --output "$ARTIFACTS_PATH/MalwareScan.ClientApp/win-x86" `
                --configuration "$CONFIGURATION" `
                --runtime "win-x86"

          # Build MalwareScan.ClientApp for win-x64
          - >-
              dotnet publish ./src/MalwareScan.ClientApp `
                --output "$ARTIFACTS_PATH/MalwareScan.ClientApp/win-x64" `
                --configuration "$CONFIGURATION" `
                --runtime "win-x64"

          # Build MalwareScan.ClientApp for linux-x64
          - >-
              dotnet publish ./src/MalwareScan.ClientApp `
                --output "$ARTIFACTS_PATH/MalwareScan.ClientApp/linux-x64" `
                --configuration "$CONFIGURATION" `
                --runtime "linux-x64"

          # MalwareScan.Client unit tests
          - >-
              dotnet test test/MalwareScan.Client.UnitTests `
                --configuration "$CONFIGURATION" `
                --collect "Code Coverage"

          # MalwareScan.ClientApp unit tests
          - >-
              dotnet test test/MalwareScan.ClientApp.UnitTests `
                --configuration "$CONFIGURATION" `
                --collect "Code Coverage"
